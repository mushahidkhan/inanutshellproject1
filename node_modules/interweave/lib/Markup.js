"use strict";
/**
 * @copyright   2016-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var Element_1 = __importDefault(require("./Element"));
var Parser_1 = __importDefault(require("./Parser"));
var Markup = /** @class */ (function (_super) {
    __extends(Markup, _super);
    function Markup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Markup.prototype.getContent = function () {
        var _a = this.props, _b = _a.content, content = _b === void 0 ? '' : _b, noHtml = _a.noHtml, noHtmlExceptMatchers = _a.noHtmlExceptMatchers, disableLineBreaks = _a.disableLineBreaks, disableWhitelist = _a.disableWhitelist, emptyContent = _a.emptyContent, parsedContent = _a.parsedContent;
        if (parsedContent) {
            return parsedContent;
        }
        var markup = new Parser_1.default(content || '', {
            disableLineBreaks: disableLineBreaks,
            disableWhitelist: disableWhitelist,
            noHtml: noHtml,
            noHtmlExceptMatchers: noHtmlExceptMatchers,
        }).parse();
        return markup.length ? markup : emptyContent;
    };
    Markup.prototype.render = function () {
        var content = this.getContent();
        var tag = this.props.tagName;
        return tag === 'fragment' ? (react_1.default.createElement(react_1.default.Fragment, null, content)) : (react_1.default.createElement(Element_1.default, { tagName: tag || 'div' }, content));
    };
    Markup.propTypes = {
        content: prop_types_1.default.string,
        disableLineBreaks: prop_types_1.default.bool,
        disableWhitelist: prop_types_1.default.bool,
        emptyContent: prop_types_1.default.node,
        noHtml: prop_types_1.default.bool,
        noHtmlExceptMatchers: prop_types_1.default.bool,
        parsedContent: prop_types_1.default.node,
        tagName: prop_types_1.default.oneOf(['span', 'div', 'p', 'fragment']),
    };
    Markup.defaultProps = {
        content: '',
        disableLineBreaks: false,
        disableWhitelist: false,
        emptyContent: null,
        noHtml: false,
        noHtmlExceptMatchers: false,
        parsedContent: null,
        tagName: 'div',
    };
    return Markup;
}(react_1.default.PureComponent));
exports.default = Markup;
