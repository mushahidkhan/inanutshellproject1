"use strict";
/**
 * @copyright   2016-2018, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// Parser rules for HTML tags
exports.PARSER_ALLOW = 1; // Allow element and children
exports.PARSER_DENY = 2; // Do not render this element or its children
exports.TYPE_INLINE = 'inline';
exports.TYPE_BLOCK = 'block';
exports.TYPE_INLINE_BLOCK = 'inline-block'; // Special case
exports.CONFIG_INLINE = {
    rule: exports.PARSER_ALLOW,
    type: exports.TYPE_INLINE,
    inline: true,
    block: false,
    self: false,
    void: false,
    parent: [],
    children: [],
};
exports.CONFIG_BLOCK = {
    rule: exports.PARSER_ALLOW,
    type: exports.TYPE_BLOCK,
    inline: true,
    block: true,
    self: true,
    void: false,
    parent: [],
    children: [],
};
// Tags not listed here will be marked as pass-through
// https://developer.mozilla.org/en-US/docs/Web/HTML/Element
var tagConfigs = {
    a: {
        type: exports.TYPE_INLINE_BLOCK,
        block: true,
    },
    address: {
        self: false,
    },
    audio: {
        children: ['track', 'source'],
    },
    br: {
        inline: false,
        void: true,
    },
    button: {
        type: exports.TYPE_INLINE_BLOCK,
    },
    dd: {
        parent: ['dl'],
    },
    dl: {
        children: ['dt'],
    },
    dt: {
        parent: ['dl'],
        children: ['dd'],
    },
    figcaption: {
        parent: ['figure'],
    },
    footer: {
        self: false,
    },
    header: {
        self: false,
    },
    h1: {
        self: false,
    },
    h2: {
        self: false,
    },
    h3: {
        self: false,
    },
    h4: {
        self: false,
    },
    h5: {
        self: false,
    },
    h6: {
        self: false,
    },
    hr: {
        inline: false,
        block: false,
        void: true,
    },
    img: {
        inline: false,
        void: true,
    },
    li: {
        self: false,
        parent: ['ul', 'ol'],
    },
    main: {
        self: false,
    },
    ol: {
        children: ['li'],
    },
    picture: {
        children: ['source', 'img'],
    },
    source: {
        inline: false,
        parent: ['audio', 'video', 'picture'],
        void: true,
    },
    span: {
        self: true,
    },
    table: {
        children: ['thead', 'tbody', 'tfoot', 'tr'],
    },
    tbody: {
        parent: ['table'],
        children: ['tr'],
    },
    td: {
        parent: ['tr'],
    },
    tfoot: {
        parent: ['table'],
        children: ['tr'],
    },
    th: {
        parent: ['tr'],
    },
    thead: {
        parent: ['table'],
        children: ['tr'],
    },
    tr: {
        parent: ['table', 'tbody', 'thead', 'tfoot'],
        children: ['th', 'td'],
    },
    track: {
        inline: false,
        parent: ['audio', 'video'],
        void: true,
    },
    ul: {
        children: ['li'],
    },
    video: {
        children: ['track', 'source'],
    },
};
function createConfigBuilder(config) {
    return function (tagName) {
        tagConfigs[tagName] = __assign({}, config, tagConfigs[tagName]);
    };
}
// Add inline tags
[
    'a',
    'abbr',
    'b',
    'br',
    'button',
    'canvas',
    'cite',
    'code',
    'del',
    'dfn',
    'em',
    'i',
    'iframe',
    'img',
    'ins',
    'kbd',
    'label',
    'mark',
    'output',
    'picture',
    'q',
    's',
    'samp',
    'script',
    'source',
    'span',
    'strong',
    'sub',
    'sup',
    'style',
    'time',
    'track',
    'u',
    'var',
    'video',
].forEach(createConfigBuilder(exports.CONFIG_INLINE));
// Add block tags
[
    'address',
    'article',
    'aside',
    'audio',
    'blockquote',
    'dd',
    'details',
    'div',
    'dl',
    'dt',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'header',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'hr',
    'legend',
    'li',
    'main',
    'nav',
    'ol',
    'p',
    'pre',
    'section',
    'summary',
    'table',
    'thead',
    'tbody',
    'tfoot',
    'tr',
    'th',
    'td',
    'ul',
].forEach(createConfigBuilder(exports.CONFIG_BLOCK));
// Disable this map from being modified
exports.TAGS = Object.freeze(tagConfigs);
// Tags that should never be allowed, even if the whitelist is disabled
exports.TAGS_BLACKLIST = {
    applet: true,
    body: true,
    canvas: true,
    embed: true,
    frame: true,
    frameset: true,
    head: true,
    html: true,
    iframe: true,
    object: true,
    script: true,
    style: true,
};
// Filters apply to HTML attributes
exports.FILTER_ALLOW = 1;
exports.FILTER_DENY = 2;
exports.FILTER_CAST_NUMBER = 3;
exports.FILTER_CAST_BOOL = 4;
// Attributes not listed here will be denied
// https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
exports.ATTRIBUTES = Object.freeze({
    alt: exports.FILTER_ALLOW,
    cite: exports.FILTER_ALLOW,
    class: exports.FILTER_ALLOW,
    colspan: exports.FILTER_CAST_NUMBER,
    controls: exports.FILTER_CAST_BOOL,
    datetime: exports.FILTER_ALLOW,
    default: exports.FILTER_CAST_BOOL,
    disabled: exports.FILTER_CAST_BOOL,
    dir: exports.FILTER_ALLOW,
    height: exports.FILTER_ALLOW,
    href: exports.FILTER_ALLOW,
    id: exports.FILTER_ALLOW,
    kind: exports.FILTER_ALLOW,
    label: exports.FILTER_ALLOW,
    lang: exports.FILTER_ALLOW,
    loop: exports.FILTER_CAST_BOOL,
    muted: exports.FILTER_CAST_BOOL,
    poster: exports.FILTER_ALLOW,
    role: exports.FILTER_ALLOW,
    rowspan: exports.FILTER_CAST_NUMBER,
    sizes: exports.FILTER_ALLOW,
    span: exports.FILTER_CAST_NUMBER,
    src: exports.FILTER_ALLOW,
    srcset: exports.FILTER_ALLOW,
    target: exports.FILTER_ALLOW,
    title: exports.FILTER_ALLOW,
    width: exports.FILTER_ALLOW,
});
// Attributes to camel case for React props
exports.ATTRIBUTES_TO_PROPS = Object.freeze({
    class: 'className',
    colspan: 'colSpan',
    datetime: 'dateTime',
    rowspan: 'rowSpan',
    srcset: 'srcSet',
});
